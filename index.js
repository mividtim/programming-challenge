(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
/// <reference path="../typings/index.d.ts" />
const PIXI = require("pixi.js");
const TweenLite = require("gsap/TweenLite");
const SCREEN_WIDTH = 1280;
const SCREEN_HEIGHT = 720;
const INITIAL_COLS = 20;
const INITIAL_ROWS = 10;
const COLOR_BUTTON = 0x444411;
const COLOR_EVEN = 0xee1111;
const COLOR_ODD = 0x111111;
const COLOR_ARROW = 0xeeeeee;
const COLOR_CHECKER = 0x11eeee;
const BUTTON_WIDTH = 150;
const BUTTON_HEIGHT = 50;
class Game {
    constructor(checker1, checker2, boardLayout, startingPosition, squareSize) {
        this.checker1 = checker1;
        this.checker2 = checker2;
        this.boardLayout = boardLayout;
        this.startingPosition = startingPosition;
        this.squareSize = squareSize;
    }
}
(function () {
    const renderer = new PIXI.WebGLRenderer(SCREEN_WIDTH, SCREEN_HEIGHT);
    document.body.appendChild(renderer.view);
    const stage = new PIXI.Container();
    renderLoop(renderer, stage);
    const gameBoard = new PIXI.Container();
    gameBoard.position = new PIXI.Point(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - BUTTON_HEIGHT / 2);
    stage.addChild(gameBoard);
    const game = newGame(gameBoard, INITIAL_ROWS, INITIAL_COLS);
    createControls(stage, gameBoard, game);
})();
function createControls(stage, gameBoard, game) {
    stage.addChild(createButton(SCREEN_WIDTH / 2 - BUTTON_WIDTH / 2 - 20, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'New Game', () => game = newGame(gameBoard, INITIAL_ROWS, INITIAL_COLS)));
    stage.addChild(createButton(SCREEN_WIDTH / 2 + BUTTON_WIDTH / 2 + 20, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'Play', () => play(game)));
}
function createButton(x, y, label, action) {
    const button = new PIXI.Graphics();
    button.position = new PIXI.Point(x - BUTTON_WIDTH / 2, y - BUTTON_HEIGHT / 2);
    button.lineStyle(2, 0xeeeeee);
    button.beginFill(COLOR_BUTTON);
    button.drawRect(0, 0, BUTTON_WIDTH, BUTTON_HEIGHT);
    button.endFill();
    const text = new PIXI.Text(label, { stroke: 0xeeeeee, fill: 0x111111, strokeThickness: 2, align: 'center', lineJoin: 'round' });
    button.addChild(text);
    button.interactive = true;
    button.on("mouseup", action);
    button.on("touchend", action);
    return button;
}
function newGame(gameBoard, rows, cols) {
    const boardLayout = newBoardLayout(rows, cols);
    const squareSize = Math.min(SCREEN_WIDTH / cols, SCREEN_HEIGHT / rows) * .8;
    createBoard(gameBoard, boardLayout, squareSize);
    const startingPosition = randomPosition(boardLayout);
    const checker1 = createChecker(squareSize);
    gameBoard.addChild(checker1);
    checker1.position = boardPositionToPixels(boardLayout, squareSize, startingPosition);
    const checker2 = createChecker(squareSize);
    gameBoard.addChild(checker2);
    checker2.position = boardPositionToPixels(boardLayout, squareSize, startingPosition);
    return new Game(checker1, checker2, boardLayout, startingPosition, squareSize);
}
function play(game, checker1Position = null, checker2Position = null, evenMove = false) {
    if (!checker1Position) {
        checker1Position = new PIXI.Point(game.startingPosition.x, game.startingPosition.y);
        checker2Position = new PIXI.Point(game.startingPosition.x, game.startingPosition.y);
    }
    let gameEnded = false;
    checker1Position = moveChecker(game.checker1, checker1Position, game.boardLayout, game.squareSize);
    // Have to check before moving the second checker
    gameEnded = testEndGame(game.boardLayout, checker1Position, checker2Position);
    if (!gameEnded && evenMove) {
        checker2Position = moveChecker(game.checker2, checker2Position, game.boardLayout, game.squareSize);
        gameEnded = testEndGame(game.boardLayout, checker1Position, checker2Position);
    }
    if (gameEnded)
        TweenLite.to(game.checker1.scale, .5, { x: 0, y: 0 });
    else
        setTimeout(() => play(game, checker1Position, checker2Position, !evenMove), 500);
}
function moveChecker(checker, currentPosition, boardLayout, squareSize) {
    const direction = boardLayout[currentPosition.x][currentPosition.y];
    let nextPosition;
    switch (direction) {
        case 0 /* Up */:
            nextPosition = new PIXI.Point(currentPosition.x - 1, currentPosition.y);
            break;
        case 2 /* Down */:
            nextPosition = new PIXI.Point(currentPosition.x + 1, currentPosition.y);
            break;
        case 3 /* Left */:
            nextPosition = new PIXI.Point(currentPosition.x, currentPosition.y - 1);
            break;
        case 1 /* Right */:
            nextPosition = new PIXI.Point(currentPosition.x, currentPosition.y + 1);
            break;
    }
    const pixelPosition = boardPositionToPixels(boardLayout, squareSize, nextPosition);
    TweenLite.to(checker.position, .3, { x: pixelPosition.x, y: pixelPosition.y });
    return nextPosition;
}
function testEndGame(boardLayout, checker1Position, checker2Position) {
    let endGame = false;
    if (!validPosition(boardLayout, checker1Position)) {
        console.info('The path is noncircular');
        endGame = true;
    }
    else if (samePosition(checker1Position, checker2Position)) {
        console.info('The path is circular');
        endGame = true;
    }
    return endGame;
}
function validPosition(boardLayout, position) {
    return !(position.x < 0 ||
        position.x > boardLayout.length - 1 ||
        position.y < 0 ||
        position.y > boardLayout[0].length - 1);
}
function samePosition(position1, position2) {
    return position1.x === position2.x && position1.y === position2.y;
}
function newBoardLayout(rows, cols) {
    const boardLayout = [];
    for (let row = 0; row < rows; row++) {
        boardLayout.push([]);
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const arrowDirection = Math.floor(Math.random() * 4);
            boardLayout[row].push(arrowDirection);
        }
    }
    return boardLayout;
}
function createBoard(gameBoard, boardLayout, squareSize) {
    clearContainer(gameBoard);
    const rows = boardLayout.length;
    const cols = boardLayout[0].length;
    let even = false;
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const square = createSquare(squareSize, even);
            square.position = boardPositionToPixels(boardLayout, squareSize, boardPosition);
            gameBoard.addChild(square);
            square.addChild(createArrow(squareSize, boardLayout[row][col]));
            even = !even;
        }
        if (rows % 2 === 0)
            even = !even;
    }
    return gameBoard;
}
function createSquare(size, even) {
    const square = new PIXI.Graphics();
    square.beginFill(even ? COLOR_EVEN : COLOR_ODD);
    square.drawRect(-size / 2, -size / 2, size, size);
    square.endFill();
    return square;
}
function createArrow(size, direction) {
    const arrow = new PIXI.Graphics();
    arrow.beginFill(COLOR_ARROW);
    arrow.drawRect(-size / 12, -size * .2, size / 6, size * .6);
    arrow.drawPolygon([
        new PIXI.Point(0, -size * .4),
        new PIXI.Point(-size * .25, -size * .1),
        new PIXI.Point(size * .25, -size * .1)
    ]);
    arrow.endFill();
    arrow.rotation = Math.PI / 2 * direction;
    return arrow;
}
function createChecker(size) {
    const checker = new PIXI.Graphics();
    checker.alpha = .75;
    checker.beginFill(COLOR_CHECKER);
    checker.drawCircle(0, 0, size * .3);
    checker.endFill();
    return checker;
}
function boardPositionToPixels(boardLayout, size, boardPosition) {
    return new PIXI.Point((boardPosition.y - boardLayout[0].length / 2) * size, (boardPosition.x - boardLayout.length / 2) * size);
}
function randomPosition(boardLayout) {
    return new PIXI.Point(Math.floor(Math.random() * boardLayout.length), Math.floor(Math.random() * boardLayout[0].length));
}
function clearContainer(container) {
    container.children.forEach(function (child) { child.destroy(); });
    container.removeChildren();
}
function renderLoop(renderer, stage) {
    requestAnimationFrame(() => renderLoop(renderer, stage));
    renderer.render(stage);
}

},{"gsap/TweenLite":undefined,"pixi.js":undefined}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
