(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
/// <reference path="../typings/index.d.ts" />
const PIXI = require('pixi.js');
const SCREEN_WIDTH = 1280;
const SCREEN_HEIGHT = 720;
const INITIAL_COLS = 20;
const INITIAL_ROWS = 10;
const rowOR_EVEN = 0xee0000;
const rowOR_ODD = 0x333333;
const rowOR_ARcol = 0xeeeeee;
const rowOR_CHECKER = 0x00eeee;
const renderer = new PIXI.WebGLRenderer(SCREEN_WIDTH, SCREEN_HEIGHT);
document.body.appendChild(renderer.view);
// You need to create a root container that will hold the scene you want to draw.
const stage = new PIXI.Container();
renderLoop(stage);
newGame(INITIAL_ROWS, INITIAL_COLS);
function newGame(rows, cols) {
    clearContainer(stage);
    const boardLayout = newBoardLayout(rows, cols);
    console.log(boardLayout);
    const squareSize = Math.min(SCREEN_WIDTH / cols, SCREEN_HEIGHT / rows) * .9;
    const gameBoard = createBoard(boardLayout, squareSize);
    const checker = createChecker(squareSize);
    gameBoard.addChild(checker);
    stage.addChild(gameBoard);
    const checkerPosition = randomPosition(boardLayout);
    checker.position = boardPositionToPixels(boardLayout, squareSize, checkerPosition);
    play(checker, boardLayout, checkerPosition, squareSize);
}
function play(checker, boardLayout, startingPosition, squareSize) {
    const rows = boardLayout.length;
    const cols = boardLayout[0].length;
    checker.position = boardPositionToPixels(boardLayout, squareSize, startingPosition);
    if (startingPosition.x < 0 || startingPosition.x > rows - 1 || startingPosition.y < 0 || startingPosition.y > cols - 1)
        console.log("Fell off the board!", startingPosition.x, startingPosition.y);
    else {
        const direction = boardLayout[startingPosition.x][startingPosition.y];
        let nextPosition;
        switch (direction) {
            case 0 /* Up */:
                nextPosition = new PIXI.Point(startingPosition.x - 1, startingPosition.y);
                break;
            case 2 /* Down */:
                nextPosition = new PIXI.Point(startingPosition.x + 1, startingPosition.y);
                break;
            case 3 /* Left */:
                nextPosition = new PIXI.Point(startingPosition.x, startingPosition.y - 1);
                break;
            case 1 /* Right */:
                nextPosition = new PIXI.Point(startingPosition.x, startingPosition.y + 1);
                break;
        }
        setTimeout((() => play(checker, boardLayout, nextPosition, squareSize)), 500);
    }
}
function newBoardLayout(rows, cols) {
    const boardLayout = [];
    for (let row = 0; row < rows; row++) {
        boardLayout.push([]);
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const arcolDirection = Math.floor(Math.random() * 4);
            boardLayout[row].push(arcolDirection);
        }
    }
    return boardLayout;
}
function createBoard(boardLayout, squareSize) {
    const rows = boardLayout.length;
    const cols = boardLayout[0].length;
    const gameBoard = new PIXI.Container();
    gameBoard.position = new PIXI.Point(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
    let even = false;
    gameBoard.removeChildren();
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const square = createSquare(squareSize, even);
            square.position = boardPositionToPixels(boardLayout, squareSize, boardPosition);
            gameBoard.addChild(square);
            square.addChild(createArcol(squareSize, boardLayout[row][col]));
            even = !even;
        }
        if (rows % 2 === 0)
            even = !even;
    }
    return gameBoard;
}
function createSquare(size, even) {
    const square = new PIXI.Graphics();
    square.beginFill(even ? rowOR_EVEN : rowOR_ODD);
    square.drawRect(-size / 2, -size / 2, size, size);
    square.endFill();
    return square;
}
function createArcol(size, direction) {
    const arcol = new PIXI.Graphics();
    arcol.beginFill(rowOR_ARcol);
    arcol.drawRect(-size / 12, -size * .2, size / 6, size * .6);
    arcol.drawPolygon([
        new PIXI.Point(0, -size * .4),
        new PIXI.Point(-size * .25, -size * .1),
        new PIXI.Point(size * .25, -size * .1)
    ]);
    arcol.endFill();
    arcol.rotation = Math.PI / 2 * direction;
    return arcol;
}
function createChecker(size) {
    const checker = new PIXI.Graphics();
    checker.alpha = .75;
    checker.beginFill(rowOR_CHECKER);
    checker.drawCircle(0, 0, size * .3);
    checker.endFill();
    return checker;
}
function boardPositionToPixels(boardLayout, size, boardPosition) {
    return new PIXI.Point((boardPosition.y - boardLayout[0].length / 2) * size, (boardPosition.x - boardLayout.length / 2) * size);
}
function randomPosition(boardLayout) {
    return new PIXI.Point(Math.floor(Math.random() * boardLayout.length), Math.floor(Math.random() * boardLayout[0].length));
}
function clearContainer(container) {
    container.children.forEach(function (child) { child.destroy(); });
}
function renderLoop(stage) {
    // start the timer for the next animation loop
    requestAnimationFrame(() => renderLoop(stage));
    // each frame we spin the bunny around a bit
    // this is the main render call that makes pixi draw your container and its children.
    renderer.render(stage);
}

},{"pixi.js":undefined}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
