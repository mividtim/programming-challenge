(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
/// <reference path="../typings/index.d.ts" />
const PIXI = require("pixi.js");
const TweenLite = require("gsap/TweenLite");
const SCREEN_WIDTH = 1280;
const SCREEN_HEIGHT = 720;
const INITIAL_COLS = 20;
const INITIAL_ROWS = 10;
const COLOR_BUTTON = 0x444411;
const COLOR_EVEN = 0xee1111;
const COLOR_ODD = 0x111111;
const COLOR_ARROW = 0xeeeeee;
const COLOR_CHECKER = 0x11eeee;
const BUTTON_WIDTH = 150;
const BUTTON_HEIGHT = 50;
class Game {
    constructor(checker, boardLayout, checkerPosition, squareSize) {
        this.checker = checker;
        this.boardLayout = boardLayout;
        this.checkerPosition = checkerPosition;
        this.squareSize = squareSize;
    }
}
(function () {
    const renderer = new PIXI.WebGLRenderer(SCREEN_WIDTH, SCREEN_HEIGHT);
    document.body.appendChild(renderer.view);
    const stage = new PIXI.Container();
    renderLoop(renderer, stage);
    const gameBoard = new PIXI.Container();
    gameBoard.position = new PIXI.Point(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - BUTTON_HEIGHT / 2);
    stage.addChild(gameBoard);
    const game = newGame(gameBoard, INITIAL_ROWS, INITIAL_COLS);
    createControls(stage, gameBoard, game);
})();
function createControls(stage, gameBoard, game) {
    stage.addChild(createButton(SCREEN_WIDTH / 2 - BUTTON_WIDTH / 2 - 20, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'New Game', () => game = newGame(gameBoard, INITIAL_ROWS, INITIAL_COLS)));
    stage.addChild(createButton(SCREEN_WIDTH / 2 + BUTTON_WIDTH / 2 + 20, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'Play', () => play(game)));
}
function createButton(x, y, label, action) {
    const button = new PIXI.Graphics();
    button.position = new PIXI.Point(x - BUTTON_WIDTH / 2, y - BUTTON_HEIGHT / 2);
    button.lineStyle(2, 0xeeeeee);
    button.beginFill(COLOR_BUTTON);
    button.drawRect(0, 0, BUTTON_WIDTH, BUTTON_HEIGHT);
    button.endFill();
    const text = new PIXI.Text(label, { stroke: 0xeeeeee, fill: 0x111111, strokeThickness: 2, align: 'center', lineJoin: 'round' });
    button.addChild(text);
    button.interactive = true;
    button.on("mouseup", action);
    button.on("touchend", action);
    return button;
}
function newGame(gameBoard, rows, cols) {
    const boardLayout = newBoardLayout(rows, cols);
    const squareSize = Math.min(SCREEN_WIDTH / cols, SCREEN_HEIGHT / rows) * .8;
    createBoard(gameBoard, boardLayout, squareSize);
    const checker = createChecker(squareSize);
    gameBoard.addChild(checker);
    const checkerPosition = randomPosition(boardLayout);
    checker.position = boardPositionToPixels(boardLayout, squareSize, checkerPosition);
    return new Game(checker, boardLayout, checkerPosition, squareSize);
}
function play(game) {
    const rows = game.boardLayout.length;
    const cols = game.boardLayout[0].length;
    const direction = game.boardLayout[game.checkerPosition.x][game.checkerPosition.y];
    let nextPosition;
    switch (direction) {
        case 0 /* Up */:
            game.checkerPosition = new PIXI.Point(game.checkerPosition.x - 1, game.checkerPosition.y);
            break;
        case 2 /* Down */:
            game.checkerPosition = new PIXI.Point(game.checkerPosition.x + 1, game.checkerPosition.y);
            break;
        case 3 /* Left */:
            game.checkerPosition = new PIXI.Point(game.checkerPosition.x, game.checkerPosition.y - 1);
            break;
        case 1 /* Right */:
            game.checkerPosition = new PIXI.Point(game.checkerPosition.x, game.checkerPosition.y + 1);
            break;
    }
    const pixelPosition = boardPositionToPixels(game.boardLayout, game.squareSize, game.checkerPosition);
    TweenLite.to(game.checker.position, .3, { x: pixelPosition.x, y: pixelPosition.y });
    if (game.checkerPosition.x < 0 || game.checkerPosition.x > rows - 1 || game.checkerPosition.y < 0 || game.checkerPosition.y > cols - 1) {
        console.log("Fell off the board!", game.checkerPosition.x, game.checkerPosition.y);
        setTimeout(() => TweenLite.to(game.checker.scale, .5, { x: 0, y: 0 }), 500);
    }
    else {
        game.checker.scale = new PIXI.Point(1, 1);
        setTimeout(() => play(game), 500);
    }
}
function newBoardLayout(rows, cols) {
    const boardLayout = [];
    for (let row = 0; row < rows; row++) {
        boardLayout.push([]);
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const arrowDirection = Math.floor(Math.random() * 4);
            boardLayout[row].push(arrowDirection);
        }
    }
    return boardLayout;
}
function createBoard(gameBoard, boardLayout, squareSize) {
    clearContainer(gameBoard);
    const rows = boardLayout.length;
    const cols = boardLayout[0].length;
    let even = false;
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const square = createSquare(squareSize, even);
            square.position = boardPositionToPixels(boardLayout, squareSize, boardPosition);
            gameBoard.addChild(square);
            square.addChild(createArrow(squareSize, boardLayout[row][col]));
            even = !even;
        }
        if (rows % 2 === 0)
            even = !even;
    }
    return gameBoard;
}
function createSquare(size, even) {
    const square = new PIXI.Graphics();
    square.beginFill(even ? COLOR_EVEN : COLOR_ODD);
    square.drawRect(-size / 2, -size / 2, size, size);
    square.endFill();
    return square;
}
function createArrow(size, direction) {
    const arrow = new PIXI.Graphics();
    arrow.beginFill(COLOR_ARROW);
    arrow.drawRect(-size / 12, -size * .2, size / 6, size * .6);
    arrow.drawPolygon([
        new PIXI.Point(0, -size * .4),
        new PIXI.Point(-size * .25, -size * .1),
        new PIXI.Point(size * .25, -size * .1)
    ]);
    arrow.endFill();
    arrow.rotation = Math.PI / 2 * direction;
    return arrow;
}
function createChecker(size) {
    const checker = new PIXI.Graphics();
    checker.alpha = .75;
    checker.beginFill(COLOR_CHECKER);
    checker.drawCircle(0, 0, size * .3);
    checker.endFill();
    return checker;
}
function boardPositionToPixels(boardLayout, size, boardPosition) {
    return new PIXI.Point((boardPosition.y - boardLayout[0].length / 2) * size, (boardPosition.x - boardLayout.length / 2) * size);
}
function randomPosition(boardLayout) {
    return new PIXI.Point(Math.floor(Math.random() * boardLayout.length), Math.floor(Math.random() * boardLayout[0].length));
}
function clearContainer(container) {
    container.children.forEach(function (child) { child.destroy(); });
    container.removeChildren();
}
function renderLoop(renderer, stage) {
    requestAnimationFrame(() => renderLoop(renderer, stage));
    renderer.render(stage);
}

},{"gsap/TweenLite":undefined,"pixi.js":undefined}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
