(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
/// <reference path='../typings/index.d.ts' />
const PIXI = require("pixi.js");
const TweenLite = require("gsap/TweenLite");
const sounds_1 = require("./sounds");
const SCREEN_WIDTH = 1280;
const SCREEN_HEIGHT = 720;
const INITIAL_SIZE = 20;
const COLOR_BUTTON = 0x444411;
const COLOR_EVEN = 0xee1111;
const COLOR_ODD = 0x111111;
const COLOR_ARROW = 0xeeeeee;
const COLOR_CHECKER = 0x111111;
const BUTTON_WIDTH = 150;
const BUTTON_HEIGHT = 50;
class Visualization {
    constructor(checker1, checker2, boardLayout, startingPosition, squareSize, sounds) {
        this.checker1 = checker1;
        this.checker2 = checker2;
        this.boardLayout = boardLayout;
        this.startingPosition = startingPosition;
        this.squareSize = squareSize;
        this.sounds = sounds;
        this.running = false;
    }
}
(function () {
    const sounds = new sounds_1.Sounds({
        move: './sounds/move.mp3',
        collide: './sounds/collide.wav',
        fall: './sounds/fall.wav',
    });
    const renderer = new PIXI.WebGLRenderer(SCREEN_WIDTH, SCREEN_HEIGHT);
    document.body.appendChild(renderer.view);
    const stage = new PIXI.Container();
    renderLoop(renderer, stage);
    const visualizationBoard = new PIXI.Container();
    visualizationBoard.position = new PIXI.Point(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - BUTTON_HEIGHT / 2);
    stage.addChild(visualizationBoard);
    const visualization = newVisualization(visualizationBoard, INITIAL_SIZE, sounds);
    createControls(stage, visualizationBoard, visualization);
})();
function createControls(stage, visualizationBoard, visualization) {
    function changeSize(amount) {
        stop(visualization);
        let newSize = visualization.boardLayout.length + amount;
        if (newSize < 1)
            newSize = 1;
        // Keep track of the message text in the new visualization
        const message = visualization.message;
        message.text = 'Press Play to Begin';
        visualization = newVisualization(visualizationBoard, newSize, visualization.sounds);
        visualization.message = message;
    }
    stage.addChild(createButton(SCREEN_WIDTH / 2 - BUTTON_WIDTH * 1.5 - 60, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, '-', () => changeSize(-1), true // small button
    ));
    stage.addChild(createButton(SCREEN_WIDTH / 2 - BUTTON_WIDTH * 2 - 80, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, '+', () => changeSize(1), true // small button
    ));
    stage.addChild(createButton(SCREEN_WIDTH / 2 - BUTTON_WIDTH / 2 - 20, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'Shuffle', () => {
        stop(visualization);
        // Keep track of the message text in the new visualization
        const message = visualization.message;
        message.text = 'Press Play to Begin';
        visualization = newVisualization(visualizationBoard, visualization.boardLayout.length, visualization.sounds);
        visualization.message = message;
    }));
    stage.addChild(createButton(SCREEN_WIDTH / 2 + BUTTON_WIDTH / 2 + 20, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'Play', () => { if (!visualization.running)
        play(visualization); }));
    stage.addChild(createButton(SCREEN_WIDTH / 2 + BUTTON_WIDTH * 1.5 + 60, SCREEN_HEIGHT - BUTTON_HEIGHT / 2 - 50, 'Stop', () => {
        if (visualization.running) {
            visualization.message.text = 'Stopped';
            stop(visualization);
        }
    }));
    visualization.message = new PIXI.Text('Press Play to Begin', {
        fill: [0xcccccc, COLOR_BUTTON],
        stroke: 0xeeeeee,
        strokeThickness: 2
    });
    visualization.message.anchor.x = .5;
    visualization.message.position = new PIXI.Point(SCREEN_WIDTH / 2, 20);
    stage.addChild(visualization.message);
}
function newVisualization(visualizationBoard, boardSize, sounds) {
    const boardLayout = newBoardLayout(boardSize);
    const squareSize = Math.min(SCREEN_WIDTH / boardSize, SCREEN_HEIGHT / boardSize) * .75;
    createBoard(visualizationBoard, boardLayout, squareSize);
    const startingPosition = randomPosition(boardLayout);
    const checker1 = createChecker(squareSize);
    visualizationBoard.addChild(checker1);
    checker1.position = boardPositionToPixels(boardLayout.length, squareSize, startingPosition);
    const checker2 = createChecker(squareSize);
    visualizationBoard.addChild(checker2);
    checker2.position = boardPositionToPixels(boardLayout.length, squareSize, startingPosition);
    return new Visualization(checker1, checker2, boardLayout, startingPosition, squareSize, sounds);
}
function play(visualization, checker1Position = null, checker2Position = null, evenMove = false) {
    visualization.message.text = "Running";
    visualization.running = true;
    if (!checker1Position) {
        checker1Position = new PIXI.Point(visualization.startingPosition.x, visualization.startingPosition.y);
        checker2Position = new PIXI.Point(visualization.startingPosition.x, visualization.startingPosition.y);
    }
    let endCondition;
    checker1Position = moveChecker(visualization.checker1, checker1Position, visualization.boardLayout, visualization.squareSize);
    // Have to check before moving the second checker
    endCondition = testEndCondition(visualization.boardLayout, checker1Position, checker2Position);
    if (!endCondition && evenMove) {
        checker2Position = moveChecker(visualization.checker2, checker2Position, visualization.boardLayout, visualization.squareSize);
        endCondition = testEndCondition(visualization.boardLayout, checker1Position, checker2Position);
    }
    visualization.sounds.play('move');
    if (endCondition) {
        TweenLite.to(visualization.checker1.scale, .5, { x: 0, y: 0 });
        visualization.message.text = endCondition;
        visualization.sounds.play(endCondition.indexOf('non') < 0 ? 'collide' : 'fall');
        setTimeout(() => stop(visualization), 500);
    }
    else
        visualization.timeout = setTimeout(() => play(visualization, checker1Position, checker2Position, !evenMove), 500);
}
function stop(visualization) {
    if (visualization.running) {
        if (visualization.timeout) {
            clearTimeout(visualization.timeout);
            visualization.timeout = null;
        }
        const pixelPosition = boardPositionToPixels(visualization.boardLayout.length, visualization.squareSize, visualization.startingPosition);
        TweenLite.to(visualization.checker1.scale, .3, { x: 1, y: 1 });
        TweenLite.to(visualization.checker1.position, .3, { x: pixelPosition.x, y: pixelPosition.y });
        TweenLite.to(visualization.checker2.position, .3, { x: pixelPosition.x, y: pixelPosition.y });
        visualization.running = false;
    }
}
function moveChecker(checker, currentPosition, boardLayout, squareSize) {
    const direction = boardLayout[currentPosition.x][currentPosition.y];
    let nextPosition;
    switch (direction) {
        case 0 /* Up */:
            nextPosition = new PIXI.Point(currentPosition.x - 1, currentPosition.y);
            break;
        case 2 /* Down */:
            nextPosition = new PIXI.Point(currentPosition.x + 1, currentPosition.y);
            break;
        case 3 /* Left */:
            nextPosition = new PIXI.Point(currentPosition.x, currentPosition.y - 1);
            break;
        case 1 /* Right */:
            nextPosition = new PIXI.Point(currentPosition.x, currentPosition.y + 1);
            break;
    }
    const pixelPosition = boardPositionToPixels(boardLayout.length, squareSize, nextPosition);
    TweenLite.to(checker.position, .3, { x: pixelPosition.x, y: pixelPosition.y });
    return nextPosition;
}
function testEndCondition(boardLayout, checker1Position, checker2Position) {
    let endCondition;
    if (!validPosition(boardLayout, checker1Position))
        endCondition = 'The path is noncircular.';
    else if (samePosition(checker1Position, checker2Position))
        endCondition = 'The path is circular.';
    return endCondition;
}
function validPosition(boardLayout, position) {
    return !(position.x < 0 ||
        position.x > boardLayout.length - 1 ||
        position.y < 0 ||
        position.y > boardLayout[0].length - 1);
}
function samePosition(position1, position2) {
    return position1.x === position2.x && position1.y === position2.y;
}
function newBoardLayout(size) {
    const boardLayout = [];
    for (let row = 0; row < size; row++) {
        boardLayout.push([]);
        for (let col = 0; col < size; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const arrowDirection = Math.floor(Math.random() * 4);
            boardLayout[row].push(arrowDirection);
        }
    }
    return boardLayout;
}
function createBoard(visualizationBoard, boardLayout, squareSize) {
    clearContainer(visualizationBoard);
    const rows = boardLayout.length;
    const cols = boardLayout[0].length;
    let even = false;
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const boardPosition = new PIXI.Point(row, col);
            const square = createSquare(squareSize, even);
            square.position = boardPositionToPixels(boardLayout.length, squareSize, boardPosition);
            visualizationBoard.addChild(square);
            square.addChild(createArrow(squareSize, boardLayout[row][col]));
            even = !even;
        }
        if (rows % 2 === 0)
            even = !even;
    }
    return visualizationBoard;
}
function createSquare(size, even) {
    const square = new PIXI.Graphics();
    square.beginFill(even ? COLOR_EVEN : COLOR_ODD);
    square.drawRect(-size / 2, -size / 2, size, size);
    square.endFill();
    return square;
}
function createArrow(size, direction) {
    const arrow = new PIXI.Graphics();
    arrow.beginFill(COLOR_ARROW);
    arrow.drawRect(-size / 12, -size * .2, size / 6, size * .6);
    arrow.drawPolygon([
        new PIXI.Point(0, -size * .4),
        new PIXI.Point(-size * .25, -size * .1),
        new PIXI.Point(size * .25, -size * .1)
    ]);
    arrow.endFill();
    arrow.rotation = Math.PI / 2 * direction;
    return arrow;
}
function createChecker(size) {
    const checker = new PIXI.Graphics();
    checker.alpha = .75;
    checker.lineStyle(2, 0xeeeeee);
    checker.beginFill(COLOR_CHECKER);
    checker.drawCircle(0, 0, size * .3);
    checker.endFill();
    return checker;
}
function createButton(x, y, label, action, small = false) {
    const button = new PIXI.Graphics();
    const width = small ? BUTTON_WIDTH / 2 : BUTTON_WIDTH;
    button.position = new PIXI.Point(x - width / 2, y - BUTTON_HEIGHT / 2);
    button.lineStyle(2, 0xeeeeee);
    button.beginFill(COLOR_BUTTON);
    button.drawRect(0, 0, width, BUTTON_HEIGHT);
    button.endFill();
    const text = new PIXI.Text(label, { stroke: 0xeeeeee, fill: 0x111111, strokeThickness: 2, align: 'center', lineJoin: 'round' });
    text.position = new PIXI.Point(width / 2, BUTTON_HEIGHT / 2);
    text.anchor.x = .5;
    text.anchor.y = .5;
    button.addChild(text);
    button.interactive = true;
    button.on('mouseup', action);
    button.on('touchend', action);
    return button;
}
function boardPositionToPixels(boardSize, squareSize, boardPosition) {
    return new PIXI.Point((boardPosition.y - boardSize / 2) * squareSize, (boardPosition.x - boardSize / 2) * squareSize);
}
function randomPosition(boardLayout) {
    return new PIXI.Point(Math.floor(Math.random() * boardLayout.length), Math.floor(Math.random() * boardLayout[0].length));
}
function clearContainer(container) {
    container.children.forEach(function (child) { child.destroy(); });
    container.removeChildren();
}
function renderLoop(renderer, stage) {
    requestAnimationFrame(() => renderLoop(renderer, stage));
    renderer.render(stage);
}

},{"./sounds":2,"gsap/TweenLite":undefined,"pixi.js":undefined}],2:[function(require,module,exports){
"use strict";
class Sounds {
    constructor(sounds) {
        this.sounds = {};
        for (let sound in sounds) {
            const audio = new Audio();
            audio.src = sounds[sound];
            audio.preload = 'true';
            this.sounds[sound] = audio;
        }
    }
    play(soundName) {
        this.sounds[soundName].pause();
        this.sounds[soundName].currentTime = 0;
        this.sounds[soundName].play();
    }
}
exports.Sounds = Sounds;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
